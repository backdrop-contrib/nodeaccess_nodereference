<?php

/**
 * @file
 * The Node access node reference install file.
 */

/**
 * Implements hook_requirements().
 */
function nodeaccess_nodereference_requirements($phase) {
  $requirements = array();
  if (!module_exists('node_reference') && !module_exists('entityreference') && $phase == 'runtime') {
    $t = get_t();
    $requirements['node_reference'] = array(
      'title' => $t('Node reference module'),
      'severity' => REQUIREMENT_ERROR,
      'description' => $t('You need a module to reference content.  Use either <em>Entity reference</em> or <em>References</em>.'),
    );
  }
  return $requirements;
}

/**
 * Implements hook_update_last_removed().
 */
function nodeaccess_nodereference_update_last_removed() {
  return 7104;
}

/**
 * Move nodeaccess_nodereference settings from variables to config.
 */
function nodeaccess_nodereference_update_1000() {
  $field_settings = update_variable_get('nodeaccess_nodereference', array());

  state_set('nodeaccess_nodereference_cache_needs_clear', update_variable_get('nodeaccess_nodereference_cache_needs_clear', FALSE));

  // Delete variables.
  update_variable_del('nodeaccess_nodereference');
  update_variable_del('nodeaccess_nodereference_cache_needs_clear');
  update_variable_del('nodeaccess_nodereference_cross_access');

  if (empty($field_settings)) {
    return;
  }

  foreach ($field_settings as $field_name => $bundle_name) {
    config_set('field.instance.node.' . $field_name . '.' . key($bundle_name), 'settings.nodeaccess_nodereference', $bundle_name);
  }
}
