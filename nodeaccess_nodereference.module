<?php
// $Id$


/**
 * Implementation of hook_init().
 */
function nodeaccess_nodereference_init() {
  if (node_access_needs_rebuild() && !node_access_nodereference_needs_rebuild()) {
    node_access_nodereference_needs_rebuild(TRUE);
    nodeaccess_nodereference_table();
  }
  elseif (!node_access_needs_rebuild() && node_access_nodereference_needs_rebuild()) {
    // rebuild all the nodes with a node reference affected by this module - but only using this module's references.
    nodeaccess_nodereference_rebuild();
  }
}

/**
 * Implementation of hook_perm().
 */
function nodeaccess_nodereference_perm() {
  return array('administer node access node reference');
}

/**
 * Implementation of hook_menu().
 */
function nodeaccess_nodereference_menu() {
  $items = array();

  $items['admin/settings/nodeaccess_nodereference'] = array(
    'title' => 'Node access node reference settings',
    'description' => t('Configure Node Access Node Reference.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nodeaccess_nodereference_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
    
  return $items;
}

/**
 * System settings form for nodeaccess_nodereference.
 */
function nodeaccess_nodereference_admin_settings() {
  
  $form['nodeaccess_nodereference_priority'] = array(
    '#type' => 'weight',
    '#title' => t('Set node grants priority for Node Access Node Reference'),
    '#default_value' => variable_get('nodeaccess_nodereference_priority', 0),
    '#description' => t('If you are only using this access control module, you can safely ignore this. 
    If you are using multiple access control modules you can adjust the priority of this module.'),
  );
  
  // Add additional submit processing
  $form['#submit'][] = 'nodeaccess_nodereference_admin_settings_submit';

  return system_settings_form($form);
}

/**
 * Implementation of hook_node_grants().
 */
function nodeaccess_nodereference_node_grants($account, $op) {
  if ($account->uid) {
    $grants['nodeaccess_nodereference'][] = $account->uid;
    return $grants;
  }
  return NULL;
}

/**
 * Implementation of hook_form-FORM-ID_alter().
 */
function nodeaccess_nodereference_form_content_field_edit_form_alter(&$form, $form_state) {
  if ($form['#field']['type'] == 'nodereference') {
    $variable = 'nodeaccess_nodereference_'. $form['#field']['field_name'] .'_'. $form['#field']['type_name'];
    $data = variable_get($variable, array('view' => 0, 'update' => 0, 'delete' => 0));

    $form['widget']['nodeaccess_nodereference_view'] = array(
      '#type' => 'checkbox',
      '#title' => t('Pass on "view" node access'),
      '#default_value' => $data['view'],
      '#description' => t('View access on this node will be given if the user has access to one of the referenced nodes.'),
      '#weight' => 42,
    );

    $form['widget']['nodeaccess_nodereference_update'] = array(
      '#type' => 'checkbox',
      '#title' => t('Pass on "edit" node access'),
      '#default_value' => $data['update'],
      '#description' => t('Edit access on this node will be given if the user has access to one of the referenced nodes.'),
      '#weight' => 43,
    );

    $form['widget']['nodeaccess_nodereference_delete'] = array(
      '#type' => 'checkbox',
      '#title' => t('Pass on "delete" node access'),
      '#default_value' => $data['delete'],
      '#description' => t('Delete access on this node will be given if the user has access to one of the referenced nodes.'),
      '#weight' => 44,
    );

    $form['#submit'][] = 'nodeaccess_nodereference_content_field_edit_form_submit';
  }
}

/**
 * Extra submit function for User Reference field config.
 */
function nodeaccess_nodereference_content_field_edit_form_submit($form, &$form_state) {
  $form_values = &$form_state['values'];
  $variable = 'nodeaccess_nodereference_'. $form_values['field_name'] .'_'. $form_values['type_name'];
  $data = array(
    'view' => $form_values['nodeaccess_nodereference_view'],
    'update' => $form_values['nodeaccess_nodereference_update'],
    'delete' => $form_values['nodeaccess_nodereference_delete'],
  );
  variable_set($variable, $data);
  $nodes = node_load(array('type' => $form_values['type_name']));
  if ($nodes) {
    node_access_needs_rebuild(TRUE);
  }
}

/**
 * Implementation of hook_node_access_records().
 */
function nodeaccess_nodereference_node_access_records($node) {
  // first ensure we only execute this during the custom rebuild, not the drupal rebuild.
  if (!node_access_nodereference_needs_rebuild()) {
    // create an array of grants
    $grants = array();
    // grab some info about this content type from cck
    $content_types = content_types($node->type);
    // pull out the fields settings
    $fields = &$content_types['fields'];
    // get a list of all user IDs on the site
    $uids = nodeaccess_nodereference_users();
    // set priority according to config
    $priority = variable_get('nodeaccess_nodereference_priority', 0);
    // ensure $fields is an array
    if (is_array($fields)) {
      
      // Go through each user.
      foreach ($uids as $uid) {
        // Ensure they are not anonymous
        if ($uid) {
          // Load the user object
          $user_account = user_load($uid);

          // Deny this user access by default.
          $view = FALSE;
          $update = FALSE;
          $delete = FALSE;

          // Check each field in the node
          foreach ($fields as $field) {
            // Check if it is a nodereference
            if ($field['type'] == 'nodereference') {
              // Get the data about this nodereference field
              $variable = 'nodeaccess_nodereference_'. $field['field_name'] .'_'. $node->type;
              $data = variable_get($variable, array('view' => 0, 'update' => 0, 'delete' => 0));
              // Check if this nodereference allows any access
              if (($data['view'] || $data['update'] || $data['delete'])) {
                // Foreach referenced node 
                foreach ((array)$node->$field['field_name'] as $nodereference) {
                  // Load the node
                  $reference = node_load($nodereference['nid']);
                  // Check if the node is loaded
                  if ($reference) {
                    // If user does not yet have view access, and this field
                    // gives that kind of access, check if they should get it.
                    if (!$view && $data['view']) {
                      $view = nodeaccess_nodereference_node_access('view', $reference, $user_account);
                    }
                    // If user does not yet have update access, and this field
                    // gives that kind of access, check if they should get it.
                    if (!$update && $data['update']) {
                      $update = nodeaccess_nodereference_node_access('update', $reference, $user_account);
                    }
                    // If user does not yet have delete access, and this field
                    // gives that kind of access, check if they should get it.
                    if (!$delete && $data['delete']) {
                      $delete = nodeaccess_nodereference_node_access('delete', $reference, $user_account);
                    }
                    // If this user has been given all 3 types of access
                    if ($view && $update && $delete) {
                        // nothing more we can do for this user, break out of 2 foreach loops.
                        break 2;
                    }
                  }
                }
              }
            }
          }

          // If this user has been given any access
          if ($view || $update || $delete) {
            // Create a grant for it
            if (!isset($grants[$uid])) {
              $grants[$uid] = array(
                'realm' => 'nodeaccess_nodereference',
                'gid' => $uid,
                'priority' => $priority,
              );
            }
            // and add the right settings to the grants
            if ($view) {
              $grants[$uid]['grant_view'] = 1;
            }
            if ($update) {
              $grants[$uid]['grant_update'] = 1;
            }
            if ($delete) {
              $grants[$uid]['grant_delete'] = 1;
            }
          }

        }
      }
    }
    if (!empty($grants)) {
      return $grants;
    }
  }
  return NULL;
}

/**
 * Get all users on the site.
 */
function nodeaccess_nodereference_users() {
  $query = 'SELECT uid FROM {users}';
  $result = db_query($query);
  $users = array();
  while ($row = db_fetch_array($result)) {
    $users[] = $row['uid'];
  }
  return $users;
}

/**
 * A version of node_access_needs_rebuild().
 */
function node_access_nodereference_needs_rebuild($rebuild = NULL) {
  if (!isset($rebuild)) {
    return variable_get('nodeaccess_nodereference_needs_rebuild', FALSE);
  }
  elseif ($rebuild) {
    variable_set('nodeaccess_nodereference_needs_rebuild', TRUE);
  }
  else {
    variable_del('nodeaccess_nodereference_needs_rebuild');
  }
}

/**
 * A version of node_access().
 */
function nodeaccess_nodereference_node_access($op, $node, $account = NULL) {
  global $user;

  if (!$node || !in_array($op, array('view', 'update', 'delete', 'create'), TRUE)) {
    // If there was no node to check against, or the $op was not one of the
    // supported ones, we return access denied.
    return FALSE;
  }
  // Convert the node to an object if necessary:
  if ($op != 'create') {
    $node = (object)$node;
  }
  // If no user object is supplied, the access check is for the current user.
  if (empty($account)) {
    $account = $user;
  }
  // If the node is in a restricted format, disallow editing.
  if ($op == 'update' && !filter_access($node->format)) {
    return FALSE;
  }

  if (user_access('administer nodes', $account)) {
    return TRUE;
  }

  if (!user_access('access content', $account)) {
    return FALSE;
  }

  // Can't use node_invoke(), because the access hook takes the $op parameter
  // before the $node parameter.
  $module = node_get_types('module', $node);
  if ($module == 'node') {
    $module = 'node_content'; // Avoid function name collisions.
  }
  $access = module_invoke($module, 'access', $op, $node, $account);
  if (!is_null($access)) {
    return $access;
  }

  // If the module did not override the access rights, use those set in the
  // node_access table.
  if ($op != 'create' && $node->nid && $node->status) {
    $grants = array();
    foreach (node_access_grants($op, $account) as $realm => $gids) {
      foreach ($gids as $gid) {
        $grants[] = "(gid = $gid AND realm = '$realm')";
      }
    }

    $grants_sql = '';
    if (count($grants)) {
      $grants_sql = 'AND ('. implode(' OR ', $grants) .')';
    }

    $sql = "SELECT COUNT(*) FROM {nodeaccess_nodereference} WHERE (nid = 0 OR nid = %d) $grants_sql AND grant_$op >= 1";
    $result = db_query($sql, $node->nid);
    return (db_result($result));
  }

  // Let authors view their own nodes.
  if ($op == 'view' && $account->uid == $node->uid && $account->uid != 0) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Copy node_access table to nodeaccess_nodereference table.
 */
function nodeaccess_nodereference_table() {
  db_query('DELETE FROM {nodeaccess_nodereference}');
  db_query('INSERT INTO {nodeaccess_nodereference} SELECT * FROM {node_access}');
}

/**
 * A version of node_access_rebuild().
 */
function nodeaccess_nodereference_rebuild(/*$batch_mode = FALSE*/) {
  node_access_nodereference_needs_rebuild(FALSE);
  // If not in 'safe mode', increase the maximum execution time.
  if (!ini_get('safe_mode')) {
    set_time_limit(240);
  }
  $result = db_query(nodeaccess_nodereference_fetch_nodes_sql());
  while ($node = db_fetch_object($result)) {
    $loaded_node = node_load($node->nid, NULL, TRUE);
    // To preserve database integrity, only aquire grants if the node
    // loads successfully.
    if (!empty($loaded_node)) {
      nodeaccess_nodereference_acquire_grants($loaded_node);
    }
  }
  cache_clear_all();
}

/**
 * A version of node_access_acquire_grants().
 */
function nodeaccess_nodereference_acquire_grants($node) {
  $grants = module_invoke('nodeaccess_nodereference', 'node_access_records', $node);

  if (!empty($grants)) {
    // retain grants by highest priority
    $grant_by_priority = array();
    foreach ($grants as $g) {
      $grant_by_priority[intval($g['priority'])][] = $g;
    }
    krsort($grant_by_priority);
    $grants = array_shift($grant_by_priority);

    node_access_write_grants($node, $grants, NULL, FALSE);
  }

}

/**
 * Build SQL to fetch nodes that have nodereferences.
 */
function nodeaccess_nodereference_fetch_nodes_sql() {
  $sql = 'SELECT n.nid FROM {node} n ';
  $fields = content_fields();
  $joins = array();
  $wheres = array();
  foreach ((array)$fields as $field) {
    if ($field['type'] == 'nodereference') {
      if ($field['db_storage']) {
        $joins[] = 'INNER JOIN {content_type_'. $field['type_name'] .'} '. 
          $field['type_name'] .' ON n.vid = '. $field['type_name'] .'.vid';
        $where_field = $field['type_name'] .'.'. $field['field_name'] .'_nid';
      }
      else {
        $joins[] = 'INNER JOIN {content_'. $field['field_name'] .'} '. 
          $field['field_name'] .' ON n.vid = '. $field['field_name'] .'.vid';
        $where_field = $field['field_name'] .'.'. $field['field_name'] .'_nid';
      }
      $wheres[] = $where_field ." IS NOT NULL";
    }
  }
  $sql .= count($joins) ? implode(' ', $joins) : '';
  $sql .= ' WHERE ';
  $sql .= count($wheres) ? implode(' OR ', $wheres) : 'FALSE';
  return $sql;
}

