<?php
// $Id$

/**
 * Implementation of hook_menu().
 */
function nodeaccess_nodereference_menu() {
  $items = array();

  $items['admin/settings/nodeaccess_nodereference'] = array(
    'title' => 'Node access node reference',
    'description' => 'Configure Node access node reference.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nodeaccess_nodereference_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * System settings form for nodeaccess_nodereference.
 */
function nodeaccess_nodereference_admin_settings() {
  $form['nodeaccess_nodereference_priority'] = array(
    '#type' => 'weight',
    '#title' => t('Set node grants priority for Node access node reference'),
    '#default_value' => variable_get('nodeaccess_nodereference_priority', 0),
    '#description' => t('If this is the only node access module you are using, you can safely ignore this.
    If you are using multiple node access modules you can adjust the priority of this module.'),
  );
  $form['nodeaccess_nodereference_author_view'] = array(
    '#type' => 'checkbox',
    '#title' => t('Grant "view" access to node author'),
    '#default_value' => variable_get('nodeaccess_userreference_author_view', 1),
    '#description' => t('Grants "view" access back to the author.  Use this if not using other node access modules to set author access.'),
  );
  $form['nodeaccess_userreference_author_update'] = array(
    '#type' => 'checkbox',
    '#title' => t('Grant "edit" access to node author'),
    '#default_value' => variable_get('nodeaccess_userreference_author_update', 1),
    '#description' => t('Grants "edit" access back to the author.  Use this if not using other node access modules to set author access.'),
  );
  $form['nodeaccess_userreference_author_delete'] = array(
    '#type' => 'checkbox',
    '#title' => t('Grant "delete" access to node author'),
    '#default_value' => variable_get('nodeaccess_userreference_author_delete', 1),
    '#description' => t('Grants "delete" access back to the author.  Use this if not using other node access modules to set author access.'),
  );

  // Add additional submit processing
  $form['#submit'][] = 'nodeaccess_userreference_admin_settings_submit';

  return system_settings_form($form);
}

/**
 * Submit function for the system settings form for nodeaccess_nodereference.
 */
function nodeaccess_nodereference_admin_settings_submit() {
  node_access_needs_rebuild(TRUE);
}

/**
 * Implementation of hook_node_grants().
 */
function nodeaccess_nodereference_node_grants($account, $op) {
  static $grants = array();
  if (!isset($grants[$account->uid][$op])) {
    if (variable_get('nodeaccess_nodereference_cache_needs_clear', FALSE)) {
      // Clear the cache.
      cache_clear_all('nodeaccess_nodereference', 'cache', TRUE);
      variable_del('nodeaccess_nodereference_cache_needs_clear');
      $cached_grants = NULL;
    }
    else {
      $cached_grants = cache_get('nodeaccess_nodereference_'. $account->uid .'_'. $op);
    }
    if (empty($cached_grants)) {
      $grants[$account->uid][$op] = array();
      $references = nodeaccess_nodereference_get_referenced();
      foreach ($references as $reference) {
        if ($reference_node = node_load($reference) && node_access($op, $reference_node, $account)) {
          $grants[$account->uid][$op]['nodeaccess_nodereference'][] = $reference;
        }
      }
      cache_set('nodeaccess_nodereference_'. $account->uid .'_'. $op, $grants[$account->uid][$op]['nodeaccess_nodereference']);
    }
    else {
      $grants[$account->uid][$op]['nodeaccess_nodereference'] = $cached_grants;
    }
  }
  return $grants[$account->uid][$op];
}

/**
 * Get all referenced nodes that are referenced in a Node access node reference
 * field.
 */
function nodeaccess_nodereference_get_referenced() {
  $references = array();
  $info = _content_type_info();
  $settings = variable_get('nodeaccess_nodereference', NULL);
  $query = array();
  foreach ($settings as $type => $fields) {
    foreach ($fields as $field => $data) {
      if (($data['view'] || $data['update'] || $data['delete'])) {
        $field_info = $info['content types'][$type]['fields'][$field];
        $table = $field_info['db_storage'] ? 'content_type_'. $type : 'content_'. $field;
        $select = $table . $field .'_value';
        $current = $table .'vid';
        $sql = "SELECT ". $select ." AS reference FROM {". $table ."} INNER JOIN {node} ON ". $current ." = node.vid";
        $result = db_query($sql);
        while ($row = db_fetch_array($result)) {
          $references[$row['reference']] = $row['reference'];
        }
      }
    }
  }
  return $references;
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function nodeaccess_nodereference_form_content_field_edit_form_alter(&$form, $form_state) {
  if ($form['#field']['type'] == 'nodereference') {
    $data = nodeaccess_nodereference_field_settings($form['#field']['type_name'], $form['#field']['field_name']);

    $form['widget']['nodeaccess_nodereference_view'] = array(
      '#type' => 'checkbox',
      '#title' => t('Pass on "view" node access'),
      '#default_value' => $data['view'],
      '#description' => t('View access on this node will be given if the user has access to one of the referenced nodes.'),
      '#weight' => 42,
    );

    $form['widget']['nodeaccess_nodereference_update'] = array(
      '#type' => 'checkbox',
      '#title' => t('Pass on "edit" node access'),
      '#default_value' => $data['update'],
      '#description' => t('Edit access on this node will be given if the user has access to one of the referenced nodes.'),
      '#weight' => 43,
    );

    $form['widget']['nodeaccess_nodereference_delete'] = array(
      '#type' => 'checkbox',
      '#title' => t('Pass on "delete" node access'),
      '#default_value' => $data['delete'],
      '#description' => t('Delete access on this node will be given if the user has access to one of the referenced nodes.'),
      '#weight' => 44,
    );

    $form['#submit'][] = 'nodeaccess_nodereference_content_field_edit_form_submit';
  }
}

/**
 * Extra submit function for Node reference field config.
 */
function nodeaccess_nodereference_content_field_edit_form_submit($form, &$form_state) {
  $form_values = &$form_state['values'];
  $data = array(
    'view' => $form_values['nodeaccess_nodereference_view'],
    'update' => $form_values['nodeaccess_nodereference_update'],
    'delete' => $form_values['nodeaccess_nodereference_delete'],
  );
  nodeaccess_nodereference_field_settings($form_values['type_name'], $form_values['field_name'], $data);
  $nodes = node_load(array('type' => $form_values['type_name']));
  if ($nodes) {
    // Because the field settings have changed we should prompt for a full rebuild.
    node_access_needs_rebuild(TRUE);
  }
}

/**
 * Implementation of hook_node_access_records().
 */
function nodeaccess_nodereference_node_access_records($node) {
  // Create an array of grants.
  $grants = array();
  // Grab some info about this content type from CCK.
  $content_types = content_types($node->type);
  // Pull out the fields settings.
  $fields = &$content_types['fields'];
  // Set priority according to config.
  $priority = variable_get('nodeaccess_nodereference_priority', 0);
  // Ensure $fields is an array.
  if (is_array($fields)) {
    // Check each field in the node.
    foreach ($fields as $field) {
      // Check if it is a nodereference.
      if ($field['type'] == 'nodereference') {
        // Get the data about this nodereference field.
        $data = nodeaccess_nodereference_field_settings($node->type, $field['field_name']);
        // Check if this nodereference allows any access.
        if (($data['view'] || $data['update'] || $data['delete'])) {
          // Foreach referenced node
          foreach ((array)$node->$field['field_name'] as $nodereference) {
            // Load the node.
            $reference = node_load($nodereference['nid']);
            // Check if the node is loaded.
            if ($reference) {
              // Create a grant for it
              if (!isset($grants[$nid])) {
                $grants[$nid] = array(
                  'realm' => 'nodeaccess_nodereference',
                  'gid' => $nid,
                  'priority' => $priority,
                );
              }
              // And add the right settings to the grants.
              if ($data['view']) {
                $grants[$nid]['grant_view'] = 1;
              }
              if ($data['update']) {
                $grants[$nid]['grant_update'] = 1;
              }
              if ($data['delete']) {
                $grants[$nid]['grant_delete'] = 1;
              }
            }
          }
        }
      }
    }
  }

  // Flag that the cache is not to be relied upon.
  variable_set('nodeaccess_nodereference_cache_needs_clear', TRUE);

  if (!empty($grants)) {
    // Store author grants according to configuration.
    $grant_view = variable_get('nodeaccess_nodereference_author_view', 1);
    $grant_update = variable_get('nodeaccess_nodereference_author_update', 1);
    $grant_delete = variable_get('nodeaccess_nodereference_author_delete', 1);
    if ($grant_view || $grant_update || $grant_delete) {
      $grants[] = array(
        'realm' => 'nodeaccess_nodereference_author',
        'gid' => $node->uid,
        'priority' => $priority,
        'grant_view' => $grant_view,
        'grant_update' => $grant_update,
        'grant_delete' => $grant_delete,
      );
    }

    return $grants;
  }
  return NULL;
}

/**
 * Set and get nodeaccess nodereference field settings.
 *
 * @param $type_name
 *   The node type.
 * @param $field_name
 *   The name of the field.
 * @param $variable
 *   If set will update the value of the settings for this field.
 * @return
 *   The stored or updated value of the settings for this field.
 */
function nodeaccess_nodereference_field_settings($type_name, $field_name, $variable = NULL) {
  $data = variable_get('nodeaccess_nodereference', NULL);
  if (isset($variable)) {
    $data[$type_name][$field_name] = $variable;
    variable_set('nodeaccess_nodereference', $data);
  }
  return $data[$type_name][$field_name];
}
