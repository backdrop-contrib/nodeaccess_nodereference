<?php
// $Id$

/**
 * @file
 * The Node access node reference module.
 */

/**
 * Implements hook_node_grants().
 */
function nodeaccess_nodereference_node_grants($account, $op) {
  static $grants = array();
  if (!isset($grants[$account->uid][$op])) {
    if (variable_get('nodeaccess_nodereference_cache_needs_clear', FALSE)) {
      // Clear the cache.
      cache_clear_all('nodeaccess_nodereference', 'cache', TRUE);
      variable_del('nodeaccess_nodereference_cache_needs_clear');
      $cached_grants = NULL;
    }
    else {
      $cached_grants = cache_get('nodeaccess_nodereference_' . $account->uid . '_' . $op);
    }
    if (empty($cached_grants)) {
      $rights = array();
      $references = nodeaccess_nodereference_get_referenced();
      foreach ($references as $reference) {
        $reference_node = node_load($reference);
        if (!empty($reference_node) && node_access($op, $reference_node, $account)) {
          $rights[] = $reference;
        }
      }
      $grants[$account->uid][$op]['nodeaccess_nodereference'] = $rights;
      $grants[$account->uid][$op]['nodeaccess_nodereference_author'][] = $account->uid;
      $grants[$account->uid][$op]['nodeaccess_nodereference_all'][] = 1;
      cache_set('nodeaccess_nodereference_' . $account->uid . '_' . $op, $grants[$account->uid][$op]);
    }
    else {
      $grants[$account->uid][$op] = $cached_grants->data;
    }
  }

  return $grants[$account->uid][$op];
}

/**
 * Get all referenced nodes that are referenced in a Node access node reference
 * field.
 */
function nodeaccess_nodereference_get_referenced() {
  $references = array();
  $settings = variable_get('nodeaccess_nodereference', array());
  foreach ($settings as $type => $fields) {
    foreach ($fields as $field => $data) {
      if (isset($data['referenced']) && ($data['referenced']['view'] || $data['referenced']['update'] || $data['referenced']['delete'])) {
        $result = db_query("SELECT " . $field . "_nid AS reference FROM {field_data_" . $field . "}");
        foreach ($result as $row) {
          $references[$row['reference']] = $row->reference;
        }
      }
    }
  }
  return $references;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function nodeaccess_nodereference_form_field_ui_field_edit_form_alter(&$form, $form_state) {
  if ($form['#field']['type'] == 'node_reference' && $form['#instance']['entity_type'] == 'node') {
    $data = nodeaccess_nodereference_field_settings($form['#instance']['bundle'], $form['#field']['field_name']);
    $form['field']['settings']['nodeaccess_nodereference'] = array(
      '#type' => 'fieldset',
      '#title' => t('Node access node reference'),
      '#tree' => TRUE,
    );
    $form['field']['settings']['nodeaccess_nodereference']['referenced'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Grants to pass on from referenced nodes'),
      '#default_value' => isset($data['referenced']) ? $data['referenced'] : array('view'),
      '#options' => array(
        'view' => t('View'),
        'update' => t('Update'),
        'delete' => t('Delete'),
      ),
      '#description' => t('These content access permissions will be granted if the user has the same access to one of the referenced nodes.'),
    );
    $form['field']['settings']['nodeaccess_nodereference']['author'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Grants for author'),
      '#default_value' => isset($data['author']) ? $data['author'] : array('view', 'update', 'delete'),
      '#options' => array(
        'view' => t('View'),
        'update' => t('Update'),
        'delete' => t('Delete'),
      ),
      '#description' => t('These content access permissions will be granted to the authors of nodes affected by grants passed on from referenced nodes.'),
    );
    $form['field']['settings']['nodeaccess_nodereference']['all'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Grants for all users'),
      '#default_value' => isset($data['all']) ? $data['all'] : array(),
      '#options' => array(
        'view' => t('View'),
      ),
      '#description' => t('These content access permissions will be granted to all users for nodes affected by grants passed on from referenced nodes.'),
    );
    $form['field']['settings']['nodeaccess_nodereference']['priority'] = array(
      '#type' => 'weight',
      '#title' => t('Priority'),
      '#default_value' => isset($data['priority']) ? $data['priority'] : 0,
      '#description' => t('It is recommended to always leave this set to 0.'),
    );
    $form['#submit'][] = 'nodeaccess_nodereference_form_field_ui_field_edit_form_submit';

  }
}

/**
 * Extra submit function for Node reference field config.
 */
function nodeaccess_nodereference_form_field_ui_field_edit_form_submit($form, &$form_state) {
  $data = &$form_state['values']['field']['settings']['nodeaccess_nodereference'];
  $field_name = &$form_state['values']['instance']['field_name'];
  $bundle_name = &$form_state['values']['instance']['bundle'];
  nodeaccess_nodereference_field_settings($bundle_name, $field_name, $data);
  $type = &$form_state['values']['instance']['bundle'];
  $nodes = node_load_multiple(NULL, array('type' => $type));
  if ($nodes) {
    // Because the field settings have changed we should prompt for a full rebuild.
    node_access_needs_rebuild(TRUE);
  }
}

/**
 * Add node grants in a way that prevents overriding previous iterations.
 *
 * @param &$grants
 *  The grants array where the grant will be added.
 * @param $realm
 *  The realm of this grant.
 * @param $gid
 *  The grant ID.
 * @param $priority
 *  The grant priority.
 * @param $settings
 *  An settings array of boolean equivalent values with keys 'view', 'edit',
 *  and 'delete'.
 */
function nodeaccess_nodereference_add_grant(&$grants, $realm, $gid, $priority, $settings) {
  $key = $realm . $gid;
  if (!isset($grants[$key])) {
    // Setup the record.
    $grants[$key] = array(
      'realm' => $realm,
      'gid' => $gid,
      'priority' => $priority,
      'grant_view' => 0,
      'grant_update' => 0,
      'grant_delete' => 0,
    );
  }
  // Add the grants needed, so as not to override previous iterations.
  if ($settings['view']) {
    $grants[$key]['grant_view'] = 1;
  }
  if ($settings['update']) {
    $grants[$key]['grant_update'] = 1;
  }
  if ($settings['delete']) {
    $grants[$key]['grant_delete'] = 1;
  }
  // Increase the priority if needed.
  if ($priority > $grants[$key]['priority']) {
    $grants[$key]['priority'] = $priority;
  }
}

/**
 * Implements hook_node_access_records().
 */
function nodeaccess_nodereference_node_access_records($node) {
  $grants = array();
  $bundles = field_info_instances('node');

  foreach ($bundles as $bundle_name => $fields) {
    foreach ($fields as $field) {
      if ($field['display']['default']['module'] == 'node_reference') {
        $data = nodeaccess_nodereference_field_settings($bundle_name, $field['field_name']);
        if (!empty($data) && !empty($node->$field['field_name'])) {
          foreach ((array)$node->$field['field_name'] as $language) {
            foreach ($language as $nodereference) {
              if ($nodereference['nid']) {
                nodeaccess_nodereference_add_grant(
                  $grants,
                  'nodeaccess_nodereference',
                  $nodereference['nid'],
                  $data['priority'],
                  $data['referenced']
                );
              }
            }
            // If there are grants set, also add the author and view-all grants.
            // These will fire for each non-empty nodeaccess_nodereference field,
            // but redundant calls will be correctly handled by the helper function:
            // nodeaccess_nodereference_add_grant().
            if (!empty($grants)) {
              // Add author grants.
              nodeaccess_nodereference_add_grant(
                $grants,
                'nodeaccess_nodereference_author',
                $node->uid,
                $data['priority'],
                $data['author']
              );
              // Add all grants.
              nodeaccess_nodereference_add_grant(
                $grants,
                'nodeaccess_nodereference_all',
                1,
                $data['priority'],
                $data['all']
              );
            }
          }
        }
      }
    }
  }

  // Flag that the cache is not to be relied upon.
  variable_set('nodeaccess_nodereference_cache_needs_clear', TRUE);

  if (!empty($grants)) {
    return $grants;
  }
  return NULL;
}

/**
 * Set and get nodeaccess nodereference field settings.
 *
 * @param $bundle_name
 *   The name of the bundle.
 * @param $field_name
 *   The name of the field.
 * @param $variable
 *   If set will update the value of the settings for this field.
 * @return
 *   The stored or updated value of the settings for this field.
 */
function nodeaccess_nodereference_field_settings($bundle_name, $field_name, $variable = NULL) {
  $data = variable_get('nodeaccess_nodereference', array());
  if (isset($variable)) {
    $data[$bundle_name][$field_name] = $variable;
    variable_set('nodeaccess_nodereference', $data);
  }
  if (isset($data[$bundle_name][$field_name])) {
    return $data[$bundle_name][$field_name];
  }
}

/**
 * Implements of hook_node_access_explain().
 *
 * This gives the Devel module nice information to display when
 * debugging node grants.
 */
function nodeaccess_nodereference_node_access_explain($row) {
  if (
    in_array(
      $row->realm,
      array(
        'nodeaccess_nodereference',
        'nodeaccess_nodereference_author',
        'nodeaccess_nodereference_all'
      )
    )
  ) {

    foreach (array('view', 'update', 'delete') as $op) {
      $gop = 'grant_' . $op;
      if (!empty($row->$gop)) {
        $ops[] = $op;
      }
    }

    $do = implode('/', $ops);

    switch ($row->realm) {
      case 'nodeaccess_nodereference':
        $reference = node_load($row->gid);
        return t(
          'Users that may !do referenced node %node may !do this node',
          array('%node' => l($reference->title, 'node/' . $reference->nid), '!do' => $do)
        );
      case 'nodeaccess_nodereference_author':
        $account = user_load($row->gid);
        return t(
          'Node author %name may !do this node',
          array('%name' => $account->name, '!do' => $do)
        );
      case 'nodeaccess_nodereference_all':
        return t(
          'All users may !do this node',
          array('!do' => $do)
        );
    }
  }
}

